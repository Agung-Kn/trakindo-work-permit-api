generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt   @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(150)
  createdAt DateTime @default(now())

  Role        Role[]
  approvals   WorkPermitApproval[]
  submissions WorkPermit[]         @relation("UserSubmissions")

  @@map("users")
}

model Role {
  id   BigInt @id @default(autoincrement())
  name String @db.VarChar(50)
  User User[]

  @@map("roles")
}

model WorkPermit {
  id         Int      @id @default(autoincrement())
  no         String   @unique
  company    String
  branch     String
  pic        String
  location   String
  department String
  owner      String
  startDate  DateTime
  endDate    DateTime

  equipments  Equipment[]
  machines    Machine[]
  materials   Material[]
  ppes        WorkPermitPPE[]
  emergencies WorkPermitEmergency[]
  checklists  ChecklistAnswer[]

  approvals WorkPermitApproval[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById BigInt?
  createdBy   User?   @relation("UserSubmissions", fields: [createdById], references: [id])
}

model WorkPermitApproval {
  id           Int            @id @default(autoincrement())
  workPermitId Int
  approverId   BigInt
  role         String
  status       ApprovalStatus @default(PENDING)
  reason       String?
  approvedAt   DateTime?

  workPermit WorkPermit @relation(fields: [workPermitId], references: [id])
  approver   User       @relation(fields: [approverId], references: [id])

  @@unique([workPermitId, role])
}

model Equipment {
  id           Int        @id @default(autoincrement())
  name         String
  qty          Int
  workPermitId Int
  workPermit   WorkPermit @relation(fields: [workPermitId], references: [id], onDelete: Cascade)
}

model Machine {
  id           Int        @id @default(autoincrement())
  name         String
  qty          Int
  workPermitId Int
  workPermit   WorkPermit @relation(fields: [workPermitId], references: [id], onDelete: Cascade)
}

model Material {
  id           Int        @id @default(autoincrement())
  name         String
  qty          Int
  workPermitId Int
  workPermit   WorkPermit @relation(fields: [workPermitId], references: [id], onDelete: Cascade)
}

model WorkPermitPPE {
  id           Int        @id @default(autoincrement())
  name         String
  selected     Boolean    @default(false)
  workPermitId Int
  workPermit   WorkPermit @relation(fields: [workPermitId], references: [id], onDelete: Cascade)
}

model WorkPermitEmergency {
  id           Int        @id @default(autoincrement())
  name         String
  selected     Boolean    @default(false)
  workPermitId Int
  workPermit   WorkPermit @relation(fields: [workPermitId], references: [id], onDelete: Cascade)
}

model ChecklistAnswer {
  id           Int        @id @default(autoincrement())
  question     String
  answer       String
  additional   String?
  workPermitId Int
  workPermit   WorkPermit @relation(fields: [workPermitId], references: [id], onDelete: Cascade)
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
